@import "setup";

// === Ideal html CSS properties ===
// (use these on all projects if possible)
html, body {
    // allows width and height definitions to account
    // for an element's border and padding
    // https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing
    box-sizing: border-box;

    // changes the root font size from 16 to 10px 
    font-size: 62.5%;

    // removes pre-defined margin and padding
    margin: 0;
    padding: 0;
}

// you can start positioning stuff with flexbox using `display: flex`
.parent {
    display: flex;
    font-size: 3rem;
    background-color: lightcoral;
    border: 5px solid red;
}

.parent-intro {
    // flexbox automatically formats the element's children in a "row"
    flex-direction: row;

    // // you can change the direction in which the child elements flow
    // // "row-reverse" would reverse the current direction of order
    // // try uncommenting the below code and observe the difference
    // flex-direction: reverse;

    // // you can also switch to a "column" flow where elements are stacked
    // // vertically on top of each other
    // flex-direction: column;
}

.parent-spacing {
    // // with flexbox, you can customize where your childs are positioned
    // // `justify-content: center` puts all your childs to the center of the parent
    justify-content: center;

    // // if you want, you can put the elements to the other end of the container...
    // justify-content: flex-end;

    // // ...or have it spaced out (find out the differences of these on the flexbox resource)
    // justify-content: space-between;
    // justify-content: space-around;
    // justify-content: space-evenly;
}

.parent-flexconstants {
    // in this example, child-2 takes up twice the space as child 1 due to how the flex-grow
    // constant was defined. Find more about flex-grow, flex-shrink, and flex-basis on the resource
    .child-1 {
        flex-grow: 1;
    }
    .child-2 {
        // try changing this constant
        flex-grow: 2;
    }
}